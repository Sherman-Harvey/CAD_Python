
# main.py
"""
Punto de entrada principal de la aplicación
"""
import sys
from cad_system import CADSystem

def main():
    try:
        # Inicializar el sistema CAD
        cad = CADSystem()

        # Ejecutar el bucle principal
        cad.run()

    except Exception as e:
        print(f"Error en la aplicación: {e}")
        sys.exit(1)
    finally:
        print("Cerrando aplicación...")
        sys.exit(0)

if __name__ == "__main__":
    main()

# cad_system.py
import pygame
from OpenGL.GL import *
from OpenGL.GLUT import *
from OpenGL.GLU import *
from sketch import Sketch
from ui.cad_ui import CADUserInterface
import math
import numpy as np


class CADSystem:
    def __init__(self, display_size=(1600, 1000)):
        # Inicialización de pygame y OpenGL
        pygame.init()
        self.display = display_size
        # Create both OpenGL and standard surfaces
        pygame.display.set_mode(display_size, pygame.OPENGL | pygame.DOUBLEBUF)
        self.ui_surface = pygame.Surface(display_size, pygame.SRCALPHA)

        #self.screen = pygame.display.set_mode(display_size, pygame.OPENGL | pygame.DOUBLEBUF)

        # Configuración de OpenGL
        pygame.display.gl_set_attribute(pygame.GL_DEPTH_SIZE, 24)
        pygame.display.gl_set_attribute(pygame.GL_DOUBLEBUFFER, 1)

        # Configuración de la cámara
        self.camera_pos = [0, 0, 5]
        self.camera_rot = [0, 0]
        self.move_speed = 0.1
        self.mouse_speed = 0.2
        self.sketch_zoom = 5.0
        self.sketch_zoom_speed = 0.3

        # Configuración inicial de OpenGL
        self.setup_opengl()

        # Estado del sistema
        self.sketch_mode = False
        self.current_sketch = Sketch()
        self.last_mouse_pos = (display_size[0] // 2, display_size[1] // 2)
        self.drawing = False  # Add flag for line drawing

        # Inicializar UI
        self.ui = CADUserInterface(self, display_size)

        # Variables de debug
        self.debug = True
        self.last_world_pos = None

        # Ajustar valores iniciales para mejor control de zoom
        self.sketch_zoom = 5.0  # Distancia inicial de la cámara en modo sketch
        self.sketch_zoom_speed = 0.5  # Velocidad del zoom
        self.min_zoom = 2.0  # Zoom mínimo (más cerca)
        self.max_zoom = 20.0  # Zoom máximo (más lejos)




    def setup_opengl(self):
        glEnable(GL_DEPTH_TEST)
        glEnable(GL_LIGHTING)
        glEnable(GL_LIGHT0)
        glEnable(GL_COLOR_MATERIAL)
        glColorMaterial(GL_FRONT_AND_BACK, GL_AMBIENT_AND_DIFFUSE)

        # Configurar luz
        glLightfv(GL_LIGHT0, GL_POSITION, [1, 1, 1, 0])
        glLightfv(GL_LIGHT0, GL_AMBIENT, [0.2, 0.2, 0.2, 1])
        glLightfv(GL_LIGHT0, GL_DIFFUSE, [0.8, 0.8, 0.8, 1])

        # Configuración de la perspectiva
        self.setup_perspective()

    def setup_perspective(self):
        glMatrixMode(GL_PROJECTION)
        glLoadIdentity()
        gluPerspective(45, (self.display[0] / self.display[1]), 0.1, 50.0)
        glMatrixMode(GL_MODELVIEW)

    def screen_to_world(self, screen_x, screen_y):
        # Añadir print para debug
        print(f"Screen coordinates: {screen_x}, {screen_y}")
        viewport = glGetIntegerv(GL_VIEWPORT)
        modelview = glGetDoublev(GL_MODELVIEW_MATRIX)
        projection = glGetDoublev(GL_PROJECTION_MATRIX)

        win_y = viewport[3] - screen_y

        try:
            near_point = gluUnProject(float(screen_x), float(win_y), 0.0,
                                modelview, projection, viewport)
            far_point = gluUnProject(float(screen_x), float(win_y), 1.0,
                                modelview, projection, viewport)

            ray_direction = np.array(far_point) - np.array(near_point)
            ray_direction = ray_direction / np.linalg.norm(ray_direction)

            # Calculate intersection with sketch plane (z = 0)
            if abs(ray_direction[2]) > 1e-6:  # Avoid division by zero
                t = -near_point[2] / ray_direction[2]
                intersection = np.array(near_point) + t * ray_direction
                return (float(intersection[0]), float(intersection[1]))
            return None

            """plane_distance = self.sketch_zoom
            t = -(near_point[2] - plane_distance) / ray_direction[2]
            intersection = np.array(near_point) + t * ray_direction
            return (float(intersection[0]), float(intersection[1]))"""

        except Exception as e:
            print(f"Error in screen_to_world: {e}")
            return None

    def handle_sketch_input(self, event):
        if not self.sketch_mode:
            return
        if event.type == pygame.MOUSEBUTTONDOWN and event.button == 1:
            if not self.ui.handle_event(event):  # Only draw if not interacting with UI
                world_pos = self.screen_to_world(*event.pos)
                if world_pos:
                    self.drawing = True
                    self.current_sketch.start_line(world_pos)
                    self.last_world_pos = world_pos

        elif event.type == pygame.MOUSEBUTTONUP and event.button == 1:
            if self.drawing:
                world_pos = self.screen_to_world(*event.pos)
                if world_pos and self.last_world_pos:
                    self.current_sketch.end_line(world_pos)
                self.drawing = False
                self.last_world_pos = None

        elif event.type == pygame.MOUSEMOTION and self.drawing:
            world_pos = self.screen_to_world(*event.pos)
            if world_pos:
                self.current_sketch.update_current_line(world_pos)
        """if event.type == pygame.MOUSEBUTTONDOWN and event.button == 1:
            world_pos = self.screen_to_world(*pygame.mouse.get_pos())
            if world_pos:
                self.current_sketch.start_line(world_pos)
                self.last_world_pos = world_pos

        elif event.type == pygame.MOUSEBUTTONUP and event.button == 1:
            world_pos = self.screen_to_world(*pygame.mouse.get_pos())

            if world_pos and self.last_world_pos:
                self.current_sketch.end_line(world_pos)
                self.last_world_pos = None"""

    def handle_keyboard(self):
        keys = pygame.key.get_pressed()

        if self.sketch_mode:
            # Manejar zoom en modo sketch
            if keys[pygame.K_w]:  # Acercar
                self.sketch_zoom = max(self.min_zoom, self.sketch_zoom - self.sketch_zoom_speed)
                self.update_sketch_camera()
            elif keys[pygame.K_s]:  # Alejar
                self.sketch_zoom = min(self.max_zoom, self.sketch_zoom + self.sketch_zoom_speed)
                self.update_sketch_camera()

            # También podemos usar las teclas + y - para zoom
            elif keys[pygame.K_PLUS] or keys[pygame.K_KP_PLUS]:  # Acercar
                self.sketch_zoom = max(self.min_zoom, self.sketch_zoom - self.sketch_zoom_speed)
                self.update_sketch_camera()
            elif keys[pygame.K_MINUS] or keys[pygame.K_KP_MINUS]:  # Alejar
                self.sketch_zoom = min(self.max_zoom, self.sketch_zoom + self.sketch_zoom_speed)
                self.update_sketch_camera()


        else:
            # Movimiento normal de cámara en modo 3D
            self.handle_camera_movement(keys)

    def handle_camera_movement(self, keys):
        yaw = math.radians(self.camera_rot[1])
        forward = [math.sin(yaw), 0, math.cos(yaw)]
        right = [math.cos(yaw), 0, -math.sin(yaw)]

        if keys[pygame.K_w]: self.move_camera(forward)
        if keys[pygame.K_s]: self.move_camera([-x for x in forward])
        if keys[pygame.K_a]: self.move_camera([-x for x in right])
        if keys[pygame.K_d]: self.move_camera(right)

    def move_camera(self, direction):
        self.camera_pos[0] += direction[0] * self.move_speed
        self.camera_pos[2] += direction[2] * self.move_speed

    def handle_mouse_motion(self):
        if not self.sketch_mode and pygame.mouse.get_focused():
            current_pos = pygame.mouse.get_pos()
            dx = current_pos[0] - self.last_mouse_pos[0]
            dy = current_pos[1] - self.last_mouse_pos[1]

            self.camera_rot[0] = (self.camera_rot[0] + dy * self.mouse_speed) % 360
            self.camera_rot[1] = (self.camera_rot[1] + dx * self.mouse_speed) % 360

            pygame.mouse.set_pos(self.last_mouse_pos)

    def draw_sketch_plane(self):
        glDisable(GL_LIGHTING)

         # Dibujar el plano base con transparencia
        glEnable(GL_BLEND)
        glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA)

        if self.sketch_mode:
            # En modo sketch, hacer el plano más sutil
            glColor4f(0.3, 0.3, 0.3, 0.1)
        else:
            # En modo normal, plano más visible
            glColor4f(0.2, 0.2, 0.2, 0.3)


        # Plano base

        glBegin(GL_QUADS)
        glColor4f(0.2, 0.2, 0.2, 0.3)
        size = 10
        glVertex3f(-size, -size, 0)
        glVertex3f(size, -size, 0)
        glVertex3f(size, size, 0)
        glVertex3f(-size, size, 0)
        glEnd()

        # Cuadrícula

        glLineWidth(1.0)
        glBegin(GL_LINES)

        if self.sketch_mode:
            glColor3f(0.4, 0.4, 0.4)  # Gris más claro para modo sketch
        else:
            glColor3f(0.3, 0.3, 0.3)  # Gris normal para modo 3D

        for i in range(-size, size + 1):
            # Vertical
            glVertex3f(float(i), float(-size), 0.01)
            glVertex3f(float(i), float(size), 0.01)
            # Horizontal
            glVertex3f(float(-size), float(i), 0.01)
            glVertex3f(float(size), float(i), 0.01)
        glEnd()

         # Ejes principales
        glLineWidth(2.0)
        glBegin(GL_LINES)

        # Eje X en rojo
        glColor3f(1.0, 0.0, 0.0)
        glVertex3f(-size, 0, 0.02)
        glVertex3f(size, 0, 0.02)
        # Eje Y en verde
        glColor3f(0.0, 1.0, 0.0)
        glVertex3f(0, -size, 0.02)
        glVertex3f(0, size, 0.02)
        glEnd()

        glDisable(GL_BLEND)

        if not self.sketch_mode:
            glEnable(GL_LIGHTING)

    def reset_gl_state(self):
        glLoadIdentity()
        glEnable(GL_DEPTH_TEST)
        glEnable(GL_LIGHTING)
        glEnable(GL_LIGHT0)
        glEnable(GL_COLOR_MATERIAL)

    def toggle_sketch_mode(self):
        self.sketch_mode = not self.sketch_mode
        if self.sketch_mode:
            pygame.mouse.set_visible(True)
            pygame.event.set_grab(False)
            self.update_sketch_camera()
        else:
            pygame.mouse.set_visible(False)
            pygame.event.set_grab(True)
            pygame.mouse.set_pos(self.last_mouse_pos)


    def run(self):
        try:
            running = True
            while running:
                for event in pygame.event.get():
                    if event.type == pygame.QUIT:
                        running = False
                    elif event.type == pygame.KEYDOWN:
                        if event.key == pygame.K_ESCAPE:
                            running = False
                        elif event.key == pygame.K_TAB:
                            self.toggle_sketch_mode()

                    # Manejar zoom con rueda del mouse
                    elif event.type == pygame.MOUSEWHEEL:
                        self.handle_mouse_wheel(event)

                    # Manejar eventos UI en modo sketch
                    if self.sketch_mode:
                        if self.ui.handle_event(event):
                            continue
                        self.handle_sketch_input(event)

                self.handle_keyboard()
                self.handle_mouse_motion()

                # Renderizado
                self.render_scene()

                pygame.display.flip()
                pygame.time.wait(10)

        except Exception as e:
            print(f"Error in run: {e}")
            print("Cerrando aplicación...")
        finally:
            pygame.quit()

    def render_scene(self):
        # Limpiar el buffer con un color de fondo adecuado
        glClearColor(0.2, 0.2, 0.2, 1.0)  # Gris oscuro
        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)

        # Update view
        glLoadIdentity()
        glRotatef(self.camera_rot[0], 1, 0, 0)
        glRotatef(self.camera_rot[1], 0, 1, 0)
        glTranslatef(-self.camera_pos[0], -self.camera_pos[1], -self.camera_pos[2])

        # Draw 3D elements
        self.draw_sketch_plane()
        self.current_sketch.draw()

        # Switch to 2D mode for UI
        if self.sketch_mode:
            glMatrixMode(GL_PROJECTION)
            glPushMatrix()
            glLoadIdentity()
            glOrtho(0, self.display[0], self.display[1], 0, -1, 1)
            glMatrixMode(GL_MODELVIEW)
            glPushMatrix()
            glLoadIdentity()

            # Clear the UI surface
            self.ui_surface.fill((0, 0, 0, 0))
            # Dibujar el plano de sketch
            self.draw_sketch_plane()
            # Dibujar el sketch actual
            self.current_sketch.draw()

            # Draw UI to separate surface
            self.ui.draw(self.ui_surface)

            # Convert surface to texture and render
            self.render_ui_texture()

            # Restore 3D mode
            glMatrixMode(GL_PROJECTION)
            glPopMatrix()
            glMatrixMode(GL_MODELVIEW)
            glPopMatrix()

    def render_ui_texture(self):
        # Disable 3D features
        glDisable(GL_DEPTH_TEST)
        glDisable(GL_LIGHTING)

        # Create texture from UI surface
        texture_data = pygame.image.tostring(self.ui_surface, "RGBA", True)
        texture = glGenTextures(1)
        glBindTexture(GL_TEXTURE_2D, texture)
        glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, self.display[0], self.display[1], 0, GL_RGBA, GL_UNSIGNED_BYTE, texture_data)

        # Draw textured quad
        glEnable(GL_TEXTURE_2D)
        glEnable(GL_BLEND)
        glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA)

        glBegin(GL_QUADS)
        glTexCoord2f(0, 0); glVertex2f(0, 0)
        glTexCoord2f(1, 0); glVertex2f(self.display[0], 0)
        glTexCoord2f(1, 1); glVertex2f(self.display[0], self.display[1])
        glTexCoord2f(0, 1); glVertex2f(0, self.display[1])
        glEnd()

        # Cleanup
        glDeleteTextures([texture])
        glDisable(GL_TEXTURE_2D)
        glEnable(GL_DEPTH_TEST)
        glEnable(GL_LIGHTING)


    def perform_extrusion(self, height):

        """
        Método para realizar la extrusión del sketch actual
        """
        # Aquí irá la implementación de la extrusión
        print(f"Performing extrusion with height: {height}")
        self.current_sketch.extrude(height)

    def update_sketch_camera(self):
        # Actualizar la posición de la cámara manteniendo la vista frontal
        if self.sketch_mode:
            self.camera_pos[2] = self.sketch_zoom
            # Mantener la vista centrada
            self.camera_pos[0] = 0
            self.camera_pos[1] = 0
            self.camera_rot = [0, 0]

    def handle_mouse_wheel(self, event):
    # Maneja el zoom con la rueda del mouse

        if self.sketch_mode and event.type == pygame.MOUSEWHEEL:
            # Zoom con la rueda del mouse
            zoom_change = -event.y * self.sketch_zoom_speed  # Invertir dirección si es necesario
            self.sketch_zoom = max(self.min_zoom, min(self.max_zoom, self.sketch_zoom + zoom_change))
            self.update_sketch_camera()

# sketch.py
"""
Maneja toda la lógica relacionada con el dibujo 2D
"""
from OpenGL.GL import *
from OpenGL.GLU import *
import numpy as np

class Sketch:
    def __init__(self):
        self.points = []
        self.lines = []
        self.is_drawing = False
        self.snap_distance = 0.1
        self.current_line_start = None
        self.current_line_end = None  # Para el preview de la línea actual


    def add_point(self, point):
        # Intenta hacer snap a un punto existente
        for existing_point in self.points:
            if np.linalg.norm(np.array(existing_point) - np.array(point)) < self.snap_distance:
                return existing_point
        self.points.append(point)
        return point

    def start_line(self, point):
        self.is_drawing = True
        snap_point = self.add_point(point)
        self.current_line_start = snap_point
        self.current_line_end = snap_point  # Inicializar el punto final

    def update_current_line(self, point):
        """
        Actualiza la posición final de la línea mientras se está dibujando
        """
        if self.is_drawing:
            self.current_line_end = point

    def end_line(self, point):
        if self.is_drawing:
            snap_point = self.add_point(point)
            # Solo añadir la línea si los puntos son diferentes
            if self.current_line_start != snap_point:
                self.lines.append((self.current_line_start, snap_point))
            self.is_drawing = False
            self.current_line_start = None
            self.current_line_end = None

    def draw(self):

        glDisable(GL_DEPTH_TEST)
        glDisable(GL_LIGHTING)

        # Dibujar puntos
        glPointSize(5.0)
        glBegin(GL_POINTS)
        glColor3f(1, 1, 0)  # Amarillo para los puntos
        for point in self.points:
            glVertex3f(*point, 0)
        glEnd()

        # Dibujar líneas
        glLineWidth(2.0)
        glBegin(GL_LINES)
        glColor3f(0, 1, 0)  # Verde para las líneas
        for line in self.lines:
            glVertex3f(*line[0], 0)
            glVertex3f(*line[1], 0)
        glEnd()

        # Dibujar línea en progreso
        if self.is_drawing and self.current_line_start and self.current_line_end:
            glLineWidth(1.0)  # Línea más delgada para el preview
            glBegin(GL_LINES)
            glColor3f(1, 1, 1)  # Blanco para la línea en progreso
            glVertex3f(*self.current_line_start, 0)
            glVertex3f(*self.current_line_end, 0)
            glEnd()

        glEnable(GL_DEPTH_TEST)
        glEnable(GL_LIGHTING)


    def get_geometry(self):
        """
        Retorna la geometría actual del sketch para operaciones 3D
        """
        return {
            'points': self.points,
            'lines': self.lines
        }

    def clear(self):
        """
        Limpia el sketch actual
        """
        self.points = []
        self.lines = []
        self.is_drawing = False
        self.current_line_start = None
        self.current_line_end = None


# ui/__init__.py
"""
Este archivo permite que Python trate el directorio como un paquete.
También puede exponer clases específicas para facilitar las importaciones.
"""
from .components import Button, InputBox, UIComponent
from .menus import Submenu, UIManager
from .cad_ui import CADUserInterface

__all__ = ['Button', 'InputBox', 'UIComponent', 'Submenu', 'UIManager', 'CADUserInterface']

#ui/components
import pygame

class UIComponent:
    def __init__(self, x, y, width, height):
        self.rect = pygame.Rect(x, y, width, height)
        #self.active = False
        self.visible = True

    def draw(self, surface):
        pass

    def handle_event(self, event):
        return False

class Button(UIComponent):
    def __init__(self, x, y, width, height, text, callback):
        super().__init__(x, y, width, height)
        self.text = text
        self.callback = callback
        self.font = pygame.font.Font(None, 32)
        self.colors = {
            'normal': (100, 100, 100),
            'hover': (150, 150, 150),
            'text': (255, 255, 255)
        }
        self.state = 'normal'  # Inicializar el estado
        self.submenu = None


    def draw(self, surface):
        if not self.visible:
            return

        # Dibujar el fondo del botón
        color = self.colors[self.state]
        pygame.draw.rect(surface, color, self.rect)

        # Dibujar el texto
        text_surface = self.font.render(self.text, True, self.colors['text'])
        text_rect = text_surface.get_rect(center=self.rect.center)
        surface.blit(text_surface, text_rect)

    def is_hovered(self, pos):
        return self.rect.collidepoint(pos)

    def handle_event(self, event):
        if not self.visible:
            return False

        if event.type == pygame.MOUSEMOTION:
            self.state = 'hover' if self.rect.collidepoint(event.pos) else 'normal'

        elif event.type == pygame.MOUSEBUTTONDOWN:
            if event.button == 1 and self.rect.collidepoint(event.pos):
                self.callback()
                return True
        return False

class InputBox(UIComponent):
    def __init__(self, x, y, width, height, text=''):
        super().__init__(x, y, width, height)
        self.text = text
        self.font = pygame.font.Font(None, 24)

        self.colors = {
            'inactive': (100, 100, 100),
            'active': (150, 150, 150),
            'text': (255, 255, 255)
        }
        self.active = False

    def handle_event(self, event):
        if not self.visible:
            return False

        if event.type == pygame.MOUSEBUTTONDOWN:
            self.active = self.rect.collidepoint(event.pos)
            return self.active

        if event.type == pygame.KEYDOWN and self.active:
            if event.key == pygame.K_RETURN:
                self.active = False
            elif event.key == pygame.K_BACKSPACE:
                self.text = self.text[:-1]
            else:
                self.text += event.unicode
            return True
        return False

    def draw(self, surface):
        if not self.visible:
            return

        color = self.colors['active'] if self.active else self.colors['inactive']
        pygame.draw.rect(surface, color, self.rect)

        text_surface = self.font.render(self.text, True, self.colors['text'])
        text_rect = text_surface.get_rect(center=self.rect.center)
        surface.blit(text_surface, text_rect)

#ui/menus
import pygame
from .components import UIComponent, Button, InputBox
# Aquí van las clases Submenu y UIManager
class Submenu:
    def __init__(self, x, y, width, height):
        self.rect = pygame.Rect(x, y, width, height)
        self.components = []
        self.visible = False
        self.background_color = (80, 80, 80)

    def add_component(self, component):
        self.components.append(component)

    def draw(self, surface):
        if not self.visible:
            return

        pygame.draw.rect(surface, self.background_color, self.rect)
        for component in self.components:
            component.draw(surface)

    def handle_event(self, event):
        if not self.visible:
            return False

        for component in self.components:
            if component.handle_event(event):
                return True
        return False

class UIManager:
    def __init__(self, width, height):
        self.surface = pygame.Surface((width, height), pygame.SRCALPHA)
        self.components = []
        self.active_submenu = None

    def add_component(self, component):
        self.components.append(component)

    def draw(self, screen):
        self.surface.fill((0, 0, 0, 0))
        for component in self.components:
            component.draw(self.surface)
        if self.active_submenu:
            self.active_submenu.draw(self.surface)
        screen.blit(self.surface, (0, 0))

    def handle_event(self, event):
        if self.active_submenu and self.active_submenu.handle_event(event):
            return True
        for component in self.components:
            if component.handle_event(event):
                return True
        return False

# ui/cad_ui.py
from .components import Button, InputBox
from .menus import UIManager, Submenu

class CADUserInterface:
    def __init__(self, cad_system, display_size):
        self.cad_system = cad_system
        self.ui_manager = UIManager(display_size[0], display_size[1])
        self.setup_extrude_menu()

    def setup_extrude_menu(self):
        # Crear botón de extrusión
        self.extrude_button = Button(10, 10, 100, 30, "Extrude", self.toggle_extrude_menu)
        self.ui_manager.add_component(self.extrude_button)

        # Crear submenu de extrusión
        self.extrude_submenu = Submenu(10, 50, 200, 100)
        self.extrude_input = InputBox(20, 70, 180, 30, "")
        self.extrude_submenu.add_component(self.extrude_input)

        self.extrude_confirm = Button(20, 110, 180, 30, "Confirm", self.perform_extrusion)
        self.extrude_submenu.add_component(self.extrude_confirm)

    def toggle_extrude_menu(self):
        if self.extrude_submenu.visible:
            self.extrude_submenu.visible = False
            self.ui_manager.active_submenu = None
        else:
            self.extrude_submenu.visible = True
            self.ui_manager.active_submenu = self.extrude_submenu

    def perform_extrusion(self):
        try:
            extrude_value = float(self.extrude_input.text)
            self.cad_system.perform_extrusion(extrude_value)
        except ValueError:
            print("Invalid input")

    def handle_event(self, event):
        return self.ui_manager.handle_event(event)

    def draw(self, screen):
        self.ui_manager.draw(screen)